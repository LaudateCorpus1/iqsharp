name: $(Build.Major).$(Build.Minor).$(DayOfMonth)$(rev:rr)

trigger: none

pr:
- main
- feature/*
- features/*
- release/*

schedules:
- cron: "0 9 * * Sat"
  displayName: 'Build for Component Governance'
  branches:
    include:
    - main
  always: true

variables:
  Build.Major: 0
  Build.Minor: 18
  Drops.Dir: $(Build.ArtifactStagingDirectory)/drops
  IQSharp.Hosting.Env: 'build-agent-iqsharp'
  agent.preferPowerShellOnContainers: false

jobs:
- job: "iqsharp"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: steps.yml
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true

- job: "test_selenium"
  pool:
    vmImage: 'windows-2019'
  steps:
  - template: steps-selenium.yml
  condition: ne(variables['Skip.Tests'], 'true')

- job: "pack_selfcontained"
  dependsOn: "iqsharp"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: steps-selfcontained.yml
  condition: ne(variables['Enable.Conda'], 'false')

- job: "pack_conda_linux"
  dependsOn: "pack_selfcontained"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  ##
  # Pre-reqs
  ##
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: iqsharp
      downloadPath: '$(System.DefaultWorkingDirectory)/artifacts'

  - pwsh: Move-Item "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/artifacts/iqsharp/drops" "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/drops"
    displayName: "Move build artifacts to IQ# working directory"

  ##
  # Create conda environment
  ##
  - script: |
      conda create --yes --quiet --name conda_env
    displayName: Create Anaconda environment
    
  - script: |
      conda install --yes --quiet --name conda_env python=3.7 pip setuptools pytest jupyter numpy conda-build=3.18.8 conda-package-handling=1.3.11
    displayName: Install Anaconda packages

  ##
  # Pack conda packages
  ##
  - script: |
      which conda
      type conda
      echo $CONDA_EXE
      echo $_CONDA_EXE
      eval "$('/usr/local/miniconda/bin/conda' 'shell.bash' 'hook')"
      conda activate conda_env
      conda info
      pwsh ./pack-conda.ps1
    displayName: "Packing IQ# packages"
    workingDirectory: '$(System.DefaultWorkingDirectory)/build'

  ##
  # Test conda packages
  ##
  - script: |
      eval "$('/usr/local/miniconda/bin/conda' 'shell.bash' 'hook')"
      conda activate conda_env
      conda info
      pwsh ./test-conda.ps1
    displayName: "Testing IQ# packages"
    workingDirectory: '$(System.DefaultWorkingDirectory)/build'
    condition: and(succeeded(), ne(variables['Skip.Tests'], 'true'))

  ##
  # Publish build artifacts.
  ##
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: iqsharp-conda'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: iqsharp-conda

  # - template: steps-conda.yml
  condition: ne(variables['Enable.Conda'], 'false')

- job: "pack_conda_macos"
  dependsOn: "pack_selfcontained"
  pool:
    vmImage: 'macOS-latest'
  steps:
  ##
  # Pre-reqs
  ##
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: iqsharp
      downloadPath: '$(System.DefaultWorkingDirectory)/artifacts'

  - pwsh: Move-Item "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/artifacts/iqsharp/drops" "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/drops"
    displayName: "Move build artifacts to IQ# working directory"

  ##
  # Create conda environment
  ##
  - script: |
      conda create --yes --quiet --name conda_env
    displayName: Create Anaconda environment
    
  - script: |
      conda install --yes --quiet --name conda_env python=3.7 pip setuptools pytest jupyter numpy conda-build=3.18.8 conda-package-handling=1.3.11
    displayName: Install Anaconda packages

  ##
  # Pack conda packages
  ##
  - script: |
      conda init bash
      eval "$('/usr/local/miniconda/bin/conda' 'shell.bash' 'hook')"
      conda info
      pwsh ./pack-conda.ps1
    displayName: "Packing IQ# packages"
    workingDirectory: '$(System.DefaultWorkingDirectory)/build'

  ##
  # Test conda packages
  ##
  - script: |
      conda init bash
      eval "$('/usr/local/miniconda/bin/conda' 'shell.bash' 'hook')"
      conda activate conda_env
      conda info
      pwsh ./test-conda.ps1
    displayName: "Testing IQ# packages"
    workingDirectory: '$(System.DefaultWorkingDirectory)/build'
    condition: and(succeeded(), ne(variables['Skip.Tests'], 'true'))

  ##
  # Publish build artifacts.
  ##
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: iqsharp-conda'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: iqsharp-conda
#   - template: steps-conda.yml
  condition: ne(variables['Enable.Conda'], 'false')

# - job: "pack_conda_win"
#   dependsOn: "pack_selfcontained"
#   pool:
#     vmImage: 'windows-2019'
#   steps:
#   - template: steps-conda.yml
#   condition: ne(variables['Enable.Conda'], 'false')

# - job: "test_conda_windows"
#   dependsOn: "pack_selfcontained"
#   pool:
#     vmImage: 'windows-2019'
#   container:
#     image: qdkimages.azurecr.io/internal/quantum/windows-test:latest
#     endpoint: qdkimages-acr
#   steps:
#   - template: steps-conda.yml
#   condition: ne(variables['Enable.Conda'], 'false')
